/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CategoryFilter {
        "ref": any;
    }
    interface CategoryForm {
    }
    interface CategoryList {
    }
    interface CategoryManagement {
    }
    interface CategorySelector {
    }
    interface CategoryTag {
        "key": any;
    }
    interface FormField {
        "key": any;
    }
    interface QuestionForm {
    }
    interface QuestionList {
    }
    interface QuestionManagement {
    }
    interface SectionHeading {
    }
    interface TextInput {
    }
    interface ViewSelector {
        "key": any;
        "selected": any;
    }
    interface ViewSelectors {
    }
}
declare global {
    interface HTMLCategoryFilterElement extends Components.CategoryFilter, HTMLStencilElement {
    }
    var HTMLCategoryFilterElement: {
        prototype: HTMLCategoryFilterElement;
        new (): HTMLCategoryFilterElement;
    };
    interface HTMLCategoryFormElement extends Components.CategoryForm, HTMLStencilElement {
    }
    var HTMLCategoryFormElement: {
        prototype: HTMLCategoryFormElement;
        new (): HTMLCategoryFormElement;
    };
    interface HTMLCategoryListElement extends Components.CategoryList, HTMLStencilElement {
    }
    var HTMLCategoryListElement: {
        prototype: HTMLCategoryListElement;
        new (): HTMLCategoryListElement;
    };
    interface HTMLCategoryManagementElement extends Components.CategoryManagement, HTMLStencilElement {
    }
    var HTMLCategoryManagementElement: {
        prototype: HTMLCategoryManagementElement;
        new (): HTMLCategoryManagementElement;
    };
    interface HTMLCategorySelectorElement extends Components.CategorySelector, HTMLStencilElement {
    }
    var HTMLCategorySelectorElement: {
        prototype: HTMLCategorySelectorElement;
        new (): HTMLCategorySelectorElement;
    };
    interface HTMLCategoryTagElement extends Components.CategoryTag, HTMLStencilElement {
    }
    var HTMLCategoryTagElement: {
        prototype: HTMLCategoryTagElement;
        new (): HTMLCategoryTagElement;
    };
    interface HTMLFormFieldElement extends Components.FormField, HTMLStencilElement {
    }
    var HTMLFormFieldElement: {
        prototype: HTMLFormFieldElement;
        new (): HTMLFormFieldElement;
    };
    interface HTMLQuestionFormElement extends Components.QuestionForm, HTMLStencilElement {
    }
    var HTMLQuestionFormElement: {
        prototype: HTMLQuestionFormElement;
        new (): HTMLQuestionFormElement;
    };
    interface HTMLQuestionListElement extends Components.QuestionList, HTMLStencilElement {
    }
    var HTMLQuestionListElement: {
        prototype: HTMLQuestionListElement;
        new (): HTMLQuestionListElement;
    };
    interface HTMLQuestionManagementElement extends Components.QuestionManagement, HTMLStencilElement {
    }
    var HTMLQuestionManagementElement: {
        prototype: HTMLQuestionManagementElement;
        new (): HTMLQuestionManagementElement;
    };
    interface HTMLSectionHeadingElement extends Components.SectionHeading, HTMLStencilElement {
    }
    var HTMLSectionHeadingElement: {
        prototype: HTMLSectionHeadingElement;
        new (): HTMLSectionHeadingElement;
    };
    interface HTMLTextInputElement extends Components.TextInput, HTMLStencilElement {
    }
    var HTMLTextInputElement: {
        prototype: HTMLTextInputElement;
        new (): HTMLTextInputElement;
    };
    interface HTMLViewSelectorElement extends Components.ViewSelector, HTMLStencilElement {
    }
    var HTMLViewSelectorElement: {
        prototype: HTMLViewSelectorElement;
        new (): HTMLViewSelectorElement;
    };
    interface HTMLViewSelectorsElement extends Components.ViewSelectors, HTMLStencilElement {
    }
    var HTMLViewSelectorsElement: {
        prototype: HTMLViewSelectorsElement;
        new (): HTMLViewSelectorsElement;
    };
    interface HTMLElementTagNameMap {
        "category-filter": HTMLCategoryFilterElement;
        "category-form": HTMLCategoryFormElement;
        "category-list": HTMLCategoryListElement;
        "category-management": HTMLCategoryManagementElement;
        "category-selector": HTMLCategorySelectorElement;
        "category-tag": HTMLCategoryTagElement;
        "form-field": HTMLFormFieldElement;
        "question-form": HTMLQuestionFormElement;
        "question-list": HTMLQuestionListElement;
        "question-management": HTMLQuestionManagementElement;
        "section-heading": HTMLSectionHeadingElement;
        "text-input": HTMLTextInputElement;
        "view-selector": HTMLViewSelectorElement;
        "view-selectors": HTMLViewSelectorsElement;
    }
}
declare namespace LocalJSX {
    interface CategoryFilter {
        "onFiltering"?: (event: CustomEvent<string>) => void;
        "ref"?: any;
    }
    interface CategoryForm {
    }
    interface CategoryList {
    }
    interface CategoryManagement {
    }
    interface CategorySelector {
    }
    interface CategoryTag {
        "key"?: any;
    }
    interface FormField {
        "key"?: any;
    }
    interface QuestionForm {
    }
    interface QuestionList {
    }
    interface QuestionManagement {
    }
    interface SectionHeading {
    }
    interface TextInput {
    }
    interface ViewSelector {
        "key"?: any;
        "selected"?: any;
    }
    interface ViewSelectors {
    }
    interface IntrinsicElements {
        "category-filter": CategoryFilter;
        "category-form": CategoryForm;
        "category-list": CategoryList;
        "category-management": CategoryManagement;
        "category-selector": CategorySelector;
        "category-tag": CategoryTag;
        "form-field": FormField;
        "question-form": QuestionForm;
        "question-list": QuestionList;
        "question-management": QuestionManagement;
        "section-heading": SectionHeading;
        "text-input": TextInput;
        "view-selector": ViewSelector;
        "view-selectors": ViewSelectors;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "category-filter": LocalJSX.CategoryFilter & JSXBase.HTMLAttributes<HTMLCategoryFilterElement>;
            "category-form": LocalJSX.CategoryForm & JSXBase.HTMLAttributes<HTMLCategoryFormElement>;
            "category-list": LocalJSX.CategoryList & JSXBase.HTMLAttributes<HTMLCategoryListElement>;
            "category-management": LocalJSX.CategoryManagement & JSXBase.HTMLAttributes<HTMLCategoryManagementElement>;
            "category-selector": LocalJSX.CategorySelector & JSXBase.HTMLAttributes<HTMLCategorySelectorElement>;
            "category-tag": LocalJSX.CategoryTag & JSXBase.HTMLAttributes<HTMLCategoryTagElement>;
            "form-field": LocalJSX.FormField & JSXBase.HTMLAttributes<HTMLFormFieldElement>;
            "question-form": LocalJSX.QuestionForm & JSXBase.HTMLAttributes<HTMLQuestionFormElement>;
            "question-list": LocalJSX.QuestionList & JSXBase.HTMLAttributes<HTMLQuestionListElement>;
            "question-management": LocalJSX.QuestionManagement & JSXBase.HTMLAttributes<HTMLQuestionManagementElement>;
            "section-heading": LocalJSX.SectionHeading & JSXBase.HTMLAttributes<HTMLSectionHeadingElement>;
            "text-input": LocalJSX.TextInput & JSXBase.HTMLAttributes<HTMLTextInputElement>;
            "view-selector": LocalJSX.ViewSelector & JSXBase.HTMLAttributes<HTMLViewSelectorElement>;
            "view-selectors": LocalJSX.ViewSelectors & JSXBase.HTMLAttributes<HTMLViewSelectorsElement>;
        }
    }
}
